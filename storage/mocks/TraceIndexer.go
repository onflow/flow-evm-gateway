// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	json "encoding/json"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	pebble "github.com/cockroachdb/pebble"
)

// TraceIndexer is an autogenerated mock type for the TraceIndexer type
type TraceIndexer struct {
	mock.Mock
}

// GetTransaction provides a mock function with given fields: ID
func (_m *TraceIndexer) GetTransaction(ID common.Hash) (json.RawMessage, error) {
	ret := _m.Called(ID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransaction")
	}

	var r0 json.RawMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Hash) (json.RawMessage, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(common.Hash) json.RawMessage); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(json.RawMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Hash) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreTransaction provides a mock function with given fields: ID, trace, batch
func (_m *TraceIndexer) StoreTransaction(ID common.Hash, trace json.RawMessage, batch *pebble.Batch) error {
	ret := _m.Called(ID, trace, batch)

	if len(ret) == 0 {
		panic("no return value specified for StoreTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Hash, json.RawMessage, *pebble.Batch) error); ok {
		r0 = rf(ID, trace, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTraceIndexer creates a new instance of TraceIndexer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTraceIndexer(t interface {
	mock.TestingT
	Cleanup(func())
}) *TraceIndexer {
	mock := &TraceIndexer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
