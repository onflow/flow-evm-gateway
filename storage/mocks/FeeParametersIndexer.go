// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "github.com/onflow/flow-evm-gateway/models"
	mock "github.com/stretchr/testify/mock"

	pebble "github.com/cockroachdb/pebble"
)

// FeeParametersIndexer is an autogenerated mock type for the FeeParametersIndexer type
type FeeParametersIndexer struct {
	mock.Mock
}

// Get provides a mock function with given fields:
func (_m *FeeParametersIndexer) Get() (*models.FeeParameters, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.FeeParameters
	var r1 error
	if rf, ok := ret.Get(0).(func() (*models.FeeParameters, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *models.FeeParameters); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FeeParameters)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: feeParameters, batch
func (_m *FeeParametersIndexer) Store(feeParameters *models.FeeParameters, batch *pebble.Batch) error {
	ret := _m.Called(feeParameters, batch)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.FeeParameters, *pebble.Batch) error); ok {
		r0 = rf(feeParameters, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFeeParametersIndexer creates a new instance of FeeParametersIndexer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFeeParametersIndexer(t interface {
	mock.TestingT
	Cleanup(func())
}) *FeeParametersIndexer {
	mock := &FeeParametersIndexer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
