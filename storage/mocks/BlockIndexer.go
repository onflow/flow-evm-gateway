// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	flow "github.com/onflow/flow-go-sdk"

	mock "github.com/stretchr/testify/mock"

	models "github.com/onflow/flow-evm-gateway/models"

	pebble "github.com/cockroachdb/pebble"
)

// BlockIndexer is an autogenerated mock type for the BlockIndexer type
type BlockIndexer struct {
	mock.Mock
}

// GetByHeight provides a mock function with given fields: height
func (_m *BlockIndexer) GetByHeight(height uint64) (*models.Block, error) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for GetByHeight")
	}

	var r0 *models.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*models.Block, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(uint64) *models.Block); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ID
func (_m *BlockIndexer) GetByID(ID common.Hash) (*models.Block, error) {
	ret := _m.Called(ID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Hash) (*models.Block, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(common.Hash) *models.Block); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Hash) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCadenceHeight provides a mock function with given fields: height
func (_m *BlockIndexer) GetCadenceHeight(height uint64) (uint64, error) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for GetCadenceHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (uint64, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(uint64) uint64); ok {
		r0 = rf(height)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCadenceID provides a mock function with given fields: height
func (_m *BlockIndexer) GetCadenceID(height uint64) (flow.Identifier, error) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for GetCadenceID")
	}

	var r0 flow.Identifier
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (flow.Identifier, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(uint64) flow.Identifier); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHeightByID provides a mock function with given fields: ID
func (_m *BlockIndexer) GetHeightByID(ID common.Hash) (uint64, error) {
	ret := _m.Called(ID)

	if len(ret) == 0 {
		panic("no return value specified for GetHeightByID")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Hash) (uint64, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(common.Hash) uint64); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(common.Hash) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LatestCadenceHeight provides a mock function with given fields:
func (_m *BlockIndexer) LatestCadenceHeight() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LatestCadenceHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LatestEVMHeight provides a mock function with given fields:
func (_m *BlockIndexer) LatestEVMHeight() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LatestEVMHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLatestCadenceHeight provides a mock function with given fields: cadenceHeight, batch
func (_m *BlockIndexer) SetLatestCadenceHeight(cadenceHeight uint64, batch *pebble.Batch) error {
	ret := _m.Called(cadenceHeight, batch)

	if len(ret) == 0 {
		panic("no return value specified for SetLatestCadenceHeight")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, *pebble.Batch) error); ok {
		r0 = rf(cadenceHeight, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: cadenceHeight, cadenceID, block, batch
func (_m *BlockIndexer) Store(cadenceHeight uint64, cadenceID flow.Identifier, block *models.Block, batch *pebble.Batch) error {
	ret := _m.Called(cadenceHeight, cadenceID, block, batch)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, flow.Identifier, *models.Block, *pebble.Batch) error); ok {
		r0 = rf(cadenceHeight, cadenceID, block, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBlockIndexer creates a new instance of BlockIndexer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockIndexer(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlockIndexer {
	mock := &BlockIndexer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
